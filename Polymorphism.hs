module Demo where
-- Параметрический полиморфизм: код одинаков для любых типов аргументов
-- Специальный полиморфизм: для каждого типа своя реализация

id x = x -- параметрически полимофрная функия
:t id
id :: p -> p -- p - переменная типа

k x y = x -- чтобы функция была параметрически полиморфна, приходится возвращать x или y, поскольку о типе ничего не известно

undefined -- населяет любой допустимый тип
error xxx -- тоже имеет тип :: a

:t ($)
($) :: (a -> b) -> a -> b

-- поскольку к результату f(x) должен применяться f, то a=b
apply2 f x = f (f x)
:t apply2
apply2 :: (t -> t) -> t -> t
apply2 (+5) 22 -- (+5) как раз t -> t

flip f y x = f x y   -- заметь, что f :: a -> b -> c

------------ Полезные функции ----------
const       -- a -> b -> a
flip const  -- a -> b -> b

-- Из модуля Data.Function
on :: (b -> b -> c) -> (a -> b) -> a -> a -> c
on op f x y = f x `op` f y