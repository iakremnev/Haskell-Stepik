module BasicTypes where
-- Строгая статическая типизация
import Data.Char

-- :type 'c' -- узнать тип символа

:type 3
3 :: Num p => p  -- контекст

x = 3 :: Int
:type x
x :: Int

y = 3 :: Double
:type y
y :: Double

-- Num (Int, Integer), Fractional (Double, Float) -- классы типов
-- a :: b -- оператор связывания значения с типом
-- a -> b -- оператор описания типа функции (правоассоциативный)
:t (&&)
(&&) :: Bool -> Bool -> Bool

--------------- Кортежи -------------------
(2, True)
(2, True, 'c')
fst (2, True) -- первый элемент
snd (2, True) -- второй элемент

-- пространства имён для типов и выражений не пересекаются
:t ()
() :: ()

--------------- Списки -------------------
-- Длина списка неизветсна компилятору
-- Список однородный
[1,2,3]

-- [Char] эквивалентен Sting
type String = [Char]

4 : [1,2,3] -- добавление элемента в голову списка
[1] ++ [2]  -- конкатенация списков